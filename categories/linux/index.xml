<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on JokemeBlog</title>
    <link>https://jokeme.top/categories/linux/</link>
    <description>Recent content in Linux on JokemeBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jokeme.top/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一个有意思的shell变量问题</title>
      <link>https://jokeme.top/p/funny_space_in_shell_script/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/funny_space_in_shell_script/</guid>
      <description>一个有意思的shell变量问题 今天在上班时遇到了一个批量解压zip的需求，由于几十个压缩包的名称一样，chrome下载下来以后就自动给加了编号。并且解压后的文件名也是一样的，只不过里面的文件不一样。
虽然在Windows下有批量解压缩工具，但是我没有安装。我电脑上只有7zip。既然是批量处理文件，那我就想到了用shell来做这件事。
首先！我遇到的问题就是！文件名里面有空格，类似**&amp;ldquo;abc xyz.zip&amp;rdquo;**一个文件名被shell捕获成变量以后，在for循环里面会被错误的解析成两个不同的变量，这就导致了代码逻辑上没有问题。你不亲自调试一下，就不知道为什么会报错。
为此我百度了良久，找到了以下两种解决方案
1. 解决方案一：修改IFS 我百思不得其解，为什么这么多一毛一样的文章都推荐使用IFS，而且只修改了IFS，而且用完还没有给修改回来。这不是给自己挖坑吗
IFS的默认值为空白字符（换行符、制表符或者空格）。如果你手动的修改它为别的字符，那后续的代码也就会以该字符为定界符。只能说是简单粗暴，贼鸡儿好用！
2. 解决方案二：修改文件名 一开始我看到这种方案还很疑惑！我尼玛要是有那修改文件名的功夫我还写代码干啥，哈哈哈哈。然后我看了一下思路，嗯！还是有点道理的。原文见脚本之家。
大概思路我就放在下面的代码里面讲解吧！
allzip=`ls | grep zip | sed &amp;#39;s/ (/(/g&amp;#39;`	#先用sed把&amp;#39; (&amp;#39;替换成&amp;#39;(&amp;#39;保存到list里面 echo $allzip	#echo一下,让自己放心一店 for zip in $allzip do filen=`echo $zip | sed &amp;#39;s/(/ (/g&amp;#39;`	#把存起来的没有空格的变量还原成真正的有空格的文件名 mv &amp;#34;$filen&amp;#34; $zip	#拿到了真正的文件名,为了后续方便,直接把有空格的文件修改为没有空格的 unzip $zip	#顺带给它解压一下 done 好了就是这么的简单，也不用修改什么IFS。虽然有一丢丢的绕，但是也是非常容易理解的。你们也看出来了我个人是偏向于第二种方案的，因为修改IFS万一你忘记给改回去，那你下面还有字符串类分割的操作就会度过一段非常蛋疼的调试时光。</description>
    </item>
    
    <item>
      <title>从solo迁移到hugo</title>
      <link>https://jokeme.top/p/solo_2_hugo/</link>
      <pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/solo_2_hugo/</guid>
      <description>博客迁移 最近我把我的个人博客从solo迁移到了hugo项目上了。
不是solo不够优秀而是solo不符合我的需求了，我总结了以下几点
 可定制化程度太低，千篇一律，单调枯燥，乏味。 登录需要用社区账号，不确定因素太大。 经常更新导致的版本不兼容。  我也想过给自己偷个懒使用Bolo作为solo的替代品，但是还是不符合我的预期。虽然不需要社区账号登陆，但是他和solo太相似了，以至于我感觉我换了个寂寞。
1. 初识Hugo 在我有了迁移博客到其他平台的念想时我就一直在物色新的平台，然后我突然间就在GitHub上看到了hugo。
一款golang写的软件，可以直接用markdown来更新文章，而且主题贼多，数据啥的也都是放自己手里。卧槽，我不就是我想找的吗！
2. Hugo部署 其实上面扯了些没用的，到这里才是我的技术博客开始记录的地方。
2.1 下载hugo压缩包 wget https://github.com/gohugoio/hugo/releases/download/v0.83.1/hugo_extended_0.83.1_Linux-64bit.tar.gz -O hugo.tar.gz 首先，Github找到hugo的最新版，并且是extended版本的，否者我们后续是无法自行修改scss的，我一开始就因为这点，整整折腾了一个晚上都无法修改主题为我喜欢的样式。Google了良久才发现这个问题。
2.2 解压hugo 这一步是很容易的
tar -zxvf hugo.tar.gz 然后你可以把没有用的LIENCE和README.md删除了。只留一个hugo的二进制可执行文件。
并且要把这个二进制文件放在环境变量里面。
mv hugo /usr/local/bin #我个人是推荐放这里的，你要是喜欢放别的地方也是可以的 3. 配置hugo 这里我建议你先看看hugo的quick_start，虽然看了和没有看一样，但是这也是一种学习的过程吧。
hugo new site site_name 到这里你的网站就建立完成了。是不是很惊愕！你甚至连如何运行网站都不了解。
没事，咱们慢慢来！
先下载一个好看的Theme，当然不下载也可以，但是你没有主题的网站是真的丑呀。
cd site_name wget https://github.com/CaiJimmy/hugo-theme-stack/archive/refs/tags/v2.3.0.zip -O themes/v2.3.0.zip cd themes unzip v2.3.0.zip mv hugo-theme-stack-2.3.0 hugo-theme-stack rm v2.3.0.zip 接下来就是配置文件了
baseurl:http://example.com#根据你自己改languageCode:en-ustheme:hugo-theme-stackpaginate:20title:Blog#根据你自己改# Change it to your Disqus shortname before using#disqusShortname: hugo-theme-stack# GA Tracking ID#googleAnalytics:# Theme i18n support# Available values: en, fr, id, ja, ko, pt-br, zh-cn, es, deDefaultContentLanguage:zh-cnpermalinks:post:/p/:slug/page:/:slug/params:mainSections:- postfeaturedImageField:imagerssFullContent:truefavicon:/bk3.</description>
    </item>
    
    <item>
      <title>Dockerfile编写</title>
      <link>https://jokeme.top/p/dockerfile/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/dockerfile/</guid>
      <description>今天也是摸鱼的一天没怎么看书,一直在玩Linux。并且在无意间看到了我之前下载的 DirectoryLister，就想着在Docker里面部署玩一下。
一开始我是没有想写Dockerfile的，直接在开了一个Ubuntu容器整的，但是想了想，以后想用肯定不方便，这个容器我随时随地都有可以废了它。所以就从网上看了看Dockerfile怎么写，开整！
首先我并不想介绍Dockerfile怎么样去写，网上的教程一大把，自己看就可以了 我是参考菜鸟教程的教程。
Dockerfile无非就是一个自动化的过程，至少在我看来就是这样的，可能我刚接触了解不深吧。但是按照这个思路是绝对可以写出来Dockerfile的，因为我自己就是例子🌰。
来看看我的build
7168 ◯ : docker build -t flt:v1.0 . ... ... Removing intermediate container 8fe78ec98a65 ---&amp;gt; da56585b17c1 Step 4/4 : CMD [&amp;quot;/root/np.sh&amp;quot;] ---&amp;gt; Running in 23bd36103ddd Removing intermediate container 23bd36103ddd ---&amp;gt; 114c7dec7e2f Successfully built 114c7dec7e2f Successfully tagged flt:v1.0 1. 选择基础镜像 因为Dockerfile是基于一些底层的镜像制作的，所以在这里我选择的是 ubuntu:20.04
因为我平时就是在Ubuntu环境使用的比较多,你要是使用CentOS更顺手你也可以选择使用Redhat系的基础镜像。
这里无可争议，过。
FROM ubuntu:20.04 2. 配置环境变量 其实我这里也没有啥环境变量，我也不知道啥东西要设置为环境变量，就把DirectoryLister的版本号设置为环境变量了，方便以后升级。哈哈哈哈，比较菜只能想到这东西了。
ENV DL_VERSION 3.7.7 3. 自动化运行命令 这里也没有啥好说的，有点Linux基础就可以，就是这个写法很操蛋！要不停的 &amp;amp;&amp;amp; &amp;hellip; &amp;hellip; \，至于为什么要这样呢，我查了一下，说是一个RUN就是一层，你要是写太多RUN就会套太多层，非常的臃肿。这些暂时也不是我需要考虑的，别人怎么写，我就怎么写。
这里我遇到了一个自动化安装软件时，需要用户手动输入参数的问题，平时咱手动输入参数可以，但是这自动化的时候可不能这样呀，废了老大劲网上找到了解决办法，就是利用 debconf 提前配置好参数，详细解决办法见Ubuntu问答 。
这里我特喵的还是要喷一喷CSDN，妈的一篇帖子万人抄，也不管对不对，往自己的的账号里面薅就对了。妈的好几页都是垃圾文章，浪费我的时间。</description>
    </item>
    
    <item>
      <title>ffmpeg设置请求头</title>
      <link>https://jokeme.top/p/ffmpeg_user_agent/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/ffmpeg_user_agent/</guid>
      <description>ffmpeg是一款非常强大的工具,它可以在命令行下对视频类文件进行多种操作,之前我也介绍过ffmpeg,戳这里
在使用过程中我们经常可以遇到使用ffmpeg无法下载文件的情况,那这是为什么呢？
其实有时候,服务端会对我们客户端的请求进行检验,其中最简单的就是检查请求头：User-Agent ，如果你连请求头都没,那你肯定就暴露了你不是正常的用户，你既然不是正常的用户，那那服务器那边就会拒绝你的访问请求，所以就导致了你被403。
既然这样那咱们简单设置一下请求头就可以了：
ffmpeg -user_agent &amp;quot;User-Agent: AppleCoreMedia/1.0.0.18C66 (iPhone; U; CPU OS 14_3 like Mac OS X; zh_cn)&amp;quot; -i https://www.baidu.com/xxx.mp4\?id\=2399977 -c copy str4.mp4 当你设置了请求头以后你还别高兴太早了！因为服务器那边既然开启了检测，就不会通过这麽简单的方法来拦截非正常用户的访问。一般来说还有各种headers
这时我们就需要通过抓包来获得具体的请求头里的参数了，下面我就简单的介绍一下具体的参数该如何写。注意 $&#39;\r\n&#39;这是一种换行的写法。
ffmpeg -user_agent &amp;quot;User-Agent: AppleCoreMedia/1.0.0.18C66 (iPhone; U; CPU OS 14_3 like Mac OS X; zh_cn)&amp;quot; -headers &amp;quot;Authorization: fudkmnso-... ...9-0sdf-0ea&amp;quot;$&#39;\r\n&#39;&amp;quot;Xplay-session-ID:9885998&amp;quot; -i https://www.baidu.com/xxx.mp4\?id\=2399977 -c copy str4.mp4 </description>
    </item>
    
    <item>
      <title>记录最近捯饬Linux的收获</title>
      <link>https://jokeme.top/p/linux_reward/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/linux_reward/</guid>
      <description>记录最近捯饬Linux的收获 虽然最近在准备专升本考试吧，但是也没有认真的复习，最近还是天天玩Linux，在这里记录一下。
1. Windows Terminal设置 如果你关注IT圈的话，你一定知道微软在Github开源了新的Terminal，并且这是一个颜值高,用着爽的全新版本,支持Unicode。这些都是后话，我要说的是WSL和Terminal相关的设置。因为Terminal打开WSL默认的路径是该用户的在Windows下的家目录，而此时你就需要修改setting.json对应位置添加以下配置：&amp;quot;startingDirectory&amp;quot;: &amp;quot;//wsl$/Ubuntu-18.04/home/frelon&amp;quot;
如果你还没有用过Windows Terminal那你可以先看看这个Windows Terminal的简介
2. aria2下载 众所周知，aria2是一款非常好用的一款下载工具，并且它开源，体积小，运行效率高等。什么？你没有听说过？那你总听说过Motrix吧！什么你还没有听说过？那你一定知道PanDown吧？没错这款伟大的软件就是基于aria2。
aria2本身只是命令行工具，所以我们可以在命令行里安装它。
sudo apt install aira2 如果你只是简简单单的下载文件，那curl 和 wget aira2是没有啥大的区别的。额说到这里哈，就不得不说今天是curl的23岁生日，curl是 March 20. 1998 年发布的。没错！确实是23年前的今天！因为时差的原因，那边还是20号，咱们这边已经21号了，不是我记错了。
然后我就根据我个人的使用习惯给alias一下了，因为我不喜欢这种字母和数组夹杂的命令，遇到了都会给重命名一下方便以后自己敲命令。
alias ac=&amp;quot;aria2c&amp;quot; 首先既然是下载工具，那我为什么要用aria2？
我们先来看看aria2支持啥协议
URI, MAGNET, TORRENT_FILE, METALINK_FILE
传统的http，https，ftp，磁力。bt种子，metalink。你就说它强大不强大吧，可以在这么小体量的情况下，做这么多事情。现在你知道为什么这么多人夸赞它了吧。
现在我们来说说看Windows这边的下载巨头：迅雷。
为什么我们都瞧不起迅雷？
因为迅雷是白眼狼，喝BT的血起家，把自己养肥了。到最后迅雷却不反哺BT下载的生态圈。就这一点就足够可耻的了。
3. 获取CPU温度 echo `echo &amp;quot;scale=2; $(cat /sys/class/thermal/thermal_zone2/temp)/1000&amp;quot; | bc` °C 用Ubuntu 20的小伙伴可以直接用这条命令查看cpu温度，Ubuntu18我还没有试过，别的系统我就不得而知了。
4. awk 、sed awk 是一个文本处理命令，常用的就是查找文本内部的字符。
默认情况下awk是用空格来分割，
awk &#39;{print $1}&#39; 如果你想用特定的字符串分割,可以用 -F来指定。
awk -F/ &#39;{print $1}&#39;  sed它同样也是文本处理，用来替换文本的，最常用到的可能就是在刚安装完系统后换软件源的时候。用国内的url来替换国外的url
sed -i &#39;s/xxx/yyy/g&#39; filename 这个就是把文件内部的xxx替换为yyy。如果需要在文件行首添加字符，就可以sed -i &#39;s/^/yyy/g&#39; filename，有行首肯定是有行尾，那行尾把 ^换成$就可以了。</description>
    </item>
    
    <item>
      <title>Ubuntu 20.04.2 配置 vsftpd 的脑坑</title>
      <link>https://jokeme.top/p/linux_vsftpd/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/linux_vsftpd/</guid>
      <description>Ubuntu 20.04.2 配置 vsftpd 的脑坑 今天是 2020-03-01 02:13:13，刚结束了我在我哥饭店帮忙的欢乐时光，刚下班回来的我就准备掏出我的大宝贝好好的爽一爽，毕竟大半个月都没有咋用我的电脑了。因为之前刚换的Ubuntu20还有好多东西没有配置好，我就想着今天晚上把 ftp 整一下，然后就遇到了我特别尴尬的一幕，记录一下。
安装 VsFtpd sudo apt install vsftpd 这一步毫无争议，没啥可说。略
配置文件 sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.bk sudo nano /etc/vsftpd.conf listen=NO listen_ipv6=YES anonymous_enable=NO local_enable=YES write_enable=YES allow_writeable_chroot=YES local_root=/home/frelon dirmessage_enable=YES use_localtime=YES xferlog_enable=YES connect_from_port_20=YES ascii_upload_enable=YES ascii_download_enable=YES ls_recurse_enable=YES secure_chroot_dir=/var/run/vsftpd/empty pam_service_name=vsftpd rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key ssl_enable=NO utf8_filesystem=YES 一样是毫无争议，按照自己喜欢的配置来。
重启 vsftpd sudo systemctl restart vsftpd 我就特喵的在这一步出现了问题了。因为我平时使用samba比较多，在 Windows 下面映射一下就可以把局域网的 samba 当本地硬盘使，所以我就莫名其妙的输入了 sudo systemctl restart smbd ,我就本能的，条件反射的输入了 smbd，然后我就用我的用户名登陆 ftp，一下子给我整的不自信了，咋回事？这 ftp 咋还不能用呢，卧槽？ftp 出问题啦？我就改了半天的配置文件。甚至允许匿名登陆都特喵的不能用，当时就心态炸了。然后又检查了好几遍配置文件，还把防火墙给关了也于事无用
我当时甚至怀疑系统出问题啦，还把服务器给重启了一遍（重启的时候我偏偏手贱，把配置文件还原了）,还不能登陆，我就接着改配置文件 ，接着重启 smbd，然后我打算放弃了，觉得这 ftp 是不是出现了 bug。我本来打算去洗澡的，但是心里面又有一点不甘，用手机接着来，当我又一次打算重启 smbd 的时候我突然发现了问题，我特喵的用的是 ftp，我老在这重启 samba 干啥？？？这就像你抓鲁迅关我周树人什么事一样的感觉。我就突然觉得挺对不起我的 samba 的，逮着它就是一顿重启，阿哈哈哈。</description>
    </item>
    
    <item>
      <title>Ubuntu &amp;&amp; Docker 使用建议</title>
      <link>https://jokeme.top/p/ubuntu_docker_tips/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/ubuntu_docker_tips/</guid>
      <description>Ubuntu一直是我喜欢用的Linux发行版本,界面简洁,上手简单,用户广泛
在Ubuntu中使用docker时,一直就有两个问题困扰着我
1. Ubuntu pull 镜像速度太缓慢 这个问题百度一搜一大把,但是作为个人学习 类型的博客,还是记录一下的好?
1.1 Aliyun 镜像加速大法 打开aliyun的docker加速登陆页面,虽然操作略微繁琐,但是我个人觉得这是速度最快的也是最稳定的
然后找到 容器镜像服务 &amp;gt; 镜像加速器 根据提升来操作就可以啦
其中Docker 1.10.0版本以上的直接就可以在  /etc/docker/daemon.json文件里加上你的专属加速链接
sudo systemctl daemon-reload sudo systemctl restart docker 少侠记得重启加载一下配置文件
2. Docker 网桥IP和实际物理IP冲突 虽然这个问题大家不一定会遇到,因为我们使用的大部分的路由器都是192开头的,docker的网桥IP则是选择172开头的,但是在学校,公司等场所就很容易出现冲突,而且一旦出现冲突你还不一定会想到问题出现在Docker网桥IP的问题上,所以当我遇到了这个问题我也是半天才反应过来要修改docker网桥IP,下面看操作 !
一样 ! 编辑上面的/etc/docker/daemon.json文件,
{ &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://xxxxxxxxxxxx.mirror.aliyuncs.com&amp;#34;], &amp;#34;bip&amp;#34;:&amp;#34;192.168.66.1/24&amp;#34; #换成你想要修改的ip网段 } 需要注意的是这个文件是json,保存的时候检查一下是否是json格式的
sudo systemctl daemon-reload sudo systemctl restart docker 少侠记得重启加载一下配置文件</description>
    </item>
    
    <item>
      <title>CentOS 7 磁盘扩容</title>
      <link>https://jokeme.top/p/disk_expansion/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/disk_expansion/</guid>
      <description>CentOS 7 磁盘扩容 假设已经添加了磁盘,到了需要在系统里操作的步骤
对新增加的硬盘进行分区 fidsk -l fdisk /dev/sda (根据实际情况选择) n	(新增加一个分区) p	(区类型选择为主分区) 回车	(分区号) 回车　（起始扇区） 回车　（结束扇区） t 上面的分区号 8e 将分区“Linux”的类型更改为“Linux LVM” w 保存 reboot 对新增加的硬盘格式化 mkfs.ext4 /dev/sda3 添加新LVM到已有的LVM组，实现扩容 lvm　进入lvm管理 lvm&amp;gt; pvcreate /dev/sda3 这是初始化刚才的分区，必须的 lvm&amp;gt;vgextend centos /dev/sda3 将初始化过的分区加入到虚拟卷组vg_dc01 lvm&amp;gt;lvextend -L +100G /dev/mapper/centos-root　扩展已有卷的容量（注意容量大小） lvm&amp;gt;pvdisplay　查看卷容量，这时你会看到一个很大的卷了 lvm&amp;gt;quit　以上只是卷扩容了，下面是文件系统的真正扩容，输入以下命令：
resize2fs /dev/mapper/centos-root resize2fs: Bad magic number in super-block 当尝试打开 /dev/mapper/centos-root 时
报错：当尝试打开 /dev/mapper/centos-root 时 找不到有效的文件系统超级块
因为我的centos7的某些分区用的是xfs的文件系统（使用df -T查看即可知道）
将resize2fs替换为xfs_growfs，重新执行一遍即可，如下：
xfs_growfs /dev/mapper/centos-root 步骤记录 [root@last ~]# fdisk /dev/sda Welcome to fdisk (util-linux 2.</description>
    </item>
    
    <item>
      <title>OpenStack 常用命令</title>
      <link>https://jokeme.top/p/openstack_command/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/openstack_command/</guid>
      <description>OpenStack 常用命令 1. MySQL showvariableslike&amp;#34;storage_engine&amp;#34;;//查询默认存储引擎InnoDBshowvariableslike&amp;#34;have%&amp;#34;;//查询支持的存储引擎2. Keyston source /etc/keystone/admin-openrc.sh openstack user create --domain demo --password password testuser //--domain为所属域 --password为密码 testuser是用户名 [root@controller ~]# openstack user list //查看用户列表 +----------------------------------+----------+ | ID | Name | +----------------------------------+----------+ | 1877ca2b73b04380af77a5cd3d057734 | demo | | 21a0b28505a140b9b54ca5a20542746c | glance | | 65e4fa15c643474d99f0b7950b5328bb | neutron | | 710f538564124ecd9fdcfaef40792e84 | admin | | 7caa95a15cb54d789d69e511c8214cb8 | nova | | cce5f695864940a0a32eab0d2015528c | testuser | +----------------------------------+----------+ [root@controller ~]# openstack endpoint list //endpoint列表 +---------------+-----------+--------------+--------------+---------+-----------+------------------+ | ID | Region | Service Name | Service Type | Enabled | Interface | URL | +---------------+-----------+--------------+--------------+---------+-----------+------------------+ | 1f7824e81d9f4 | RegionOne | neutron | network | True | internal | http://controlle | | f04b595b97a0a | | | | | | r:9696 | | e78f46 | | | | | | | | 399280c404a54 | RegionOne | glance | image | True | public | http://controlle | | a1bb314531c2b | | | | | | r:9292 | | 880ca1 | | | | | | | | .</description>
    </item>
    
    <item>
      <title>解决一个Ubuntu 18 安装MySQL 5.7不能远程登录的问题</title>
      <link>https://jokeme.top/p/mysql_login_problem/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/mysql_login_problem/</guid>
      <description>解决一个Ubuntu 18 安装MySQL 5.7不能远程登录的问题 首先编辑 /etc/mysql/mysql.conf.d/mysqld.cnf 配置文件：
nano /etc/mysql/mysql.conf.d/mysqld.cnf 注释掉
bind-address = 127.0.0.1 #如果没有就跳过 还有就是要给root 设置一个密码，允许他远程登录
use mysql; SELECT user,host FROM user; update user set host=&amp;quot;%&amp;quot; where user=&amp;quot;root&amp;quot; update user set authentication_string=PASSWORD(&amp;quot;UrPasswd&amp;quot;)where user=&amp;quot;root&amp;quot;; flush privileges; 如果MySQL5.7 这样还不能远程登录上，咱见面持刀互a，如果你比我猛，当我没有说！
你以为这就完了吗？？哪有这么简单，你还需要下面这条命令
update user set plugin=&#39;mysql_native_password&#39;; #放在上面 use mysql； 后面执行 很多人都是忽略了这条命令，导致一直无法远程登录上MySQL* 必要的话可以重启一下MySQL哦！</description>
    </item>
    
    <item>
      <title>简单解释 NAT</title>
      <link>https://jokeme.top/p/learn_nat/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/learn_nat/</guid>
      <description>简单解释 NAT[转自知乎] NAT 大家应该十分熟悉了，它分为几种。一种就叫做 NAT，它只对 IP 地址进行转换；另一种叫做 NAPT（Network Address/Port Translation），它可以对整个会话的端点（由 IP 地址和端口号组成）做转换，这是一种更加常见的 NAT 变种。
当然了，NAPT 也分为许多种，我们这里就不深入探讨了，大家如果有兴趣可以查阅相关的文献。
下面就简单介绍一下 NAT 的工作原理：
首先，NAT A 网下的设备 1（192.168.1.101）想与某公网 IP 通讯，设备 1 将包发给 NAT A，然后 NAT A 对源 IP 进行转换发给 NAT B（中间可能还会经过多重 NAT）。
这样做的目的是，NAT B 并不知晓 NAT A 下的各个设备，他只能与 NAT A 本身通讯，因此发送给 NAT B 的包源 IP 必须是 NAT A 的公网 IP，不然 NAT B 没有办法进行回复。
接下来 NAT B 将回复包再发回 NAT A，此时就是 NAT 发挥作用的时候了，NAT A 现在要做的就是将包再分发回之前的设备，如何确定要发给谁呢？NAT 中记录了一张表，之前 192.168.1.101 通过 2333 端口与 42.</description>
    </item>
    
    <item>
      <title>两小时 Git 入门</title>
      <link>https://jokeme.top/p/learn_git/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/learn_git/</guid>
      <description>两小时 Git 入门 1.建立 Git 仓库 $ git init 2.把文件添加到仓库 $ git add + filename 3.把文件提交到仓库 $ git commit -m &amp;quot;wrote a readme file&amp;quot; 4.查看提交结果/对比工作区和文件和仓库文件的不同之处 $ git status 5.比对并列出文件和仓库文件的不同之处 $ git diff #如果git status告诉你有文件被修改过，用git diff可以查看修改内容。 6.Git 查看历史记录 $ git log/git log --pretty=oneline(查看精简版) 7.退回曾经的某个版本 7.1 退回最新版 $ git reset --hard + (对应的append GPL的commit id) $ git reset --hard HEAD^ 用 HEAD 表示当前版本，上一个版本就是 HEAD^，上上一个版本就是 HEAD^^，当然往上 100 个版本写 100 个 ^ 比较容易数不过来，所以写成 HEAD~100</description>
    </item>
    
    <item>
      <title>CentOS编译安装Nano</title>
      <link>https://jokeme.top/p/compile_nano/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/compile_nano/</guid>
      <description>CentOS编译安装Nano 众所周知,因为 CentOS 非常的稳定,所以导致 CentOS の YUM 源里面的软件非常的老旧 就拿 Nano 来说, 官方已经到了 4.0版本, 而 CentOS 这边还在2.0徘徊,这就非常的难受了.所以咱就手动编译安装!
1. 安装准备 sudo su cd yum -y install gcc ncurses-devel wget wget https://www.nano-editor.org/dist/v4/nano-4.6.tar.gz tar zxvf nano-4.6.tar.gz cd nano-4.6 2. 准备编译 ./configure make &amp;amp;&amp;amp; make install 3. 复制文件 cp src/nano /usr/bin cp doc/sample.nanorc /root/.nanorc 常用插件也给安排上
echo &#39;include &amp;quot;/usr/local/share/nano/*.nanorc&amp;quot;&#39; &amp;gt;&amp;gt; /root/.nanorc #用于高亮显示 echo &#39;set nowrap&#39; &amp;gt;&amp;gt; /root/.nanorc #关闭自动换行 echo &#39;set linenumbers&#39; &amp;gt;&amp;gt; /root/.nanorc #打开行号显示 本文参考: Hiwbb.com</description>
    </item>
    
    <item>
      <title>Linux 常用的小技巧</title>
      <link>https://jokeme.top/p/linux_skill/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/linux_skill/</guid>
      <description>Linux 常用的小技巧 1 .apt-get remove vsftpd &amp;ndash;purge 删除所有配置，下次安装的时候会重新生成配置文件
2 .编辑器 nano 快捷键 ALT+Shift+3	显示行号 CTRL+SHIFT+_	快速跳到某行
3 .如果不经常使用 Linux の桌面，但是又不希望桌面吃内存，可以试试看 sudo init 3 4 .echo 颜色输出 echo -e &amp;ldquo;\033[背景颜色；文字颜色 m 字符串\033[0m&amp;rdquo;
可以选择的编码如下所示(这些颜色是 ANSI 标准颜色)： 40 设置黑色背景 41 设置红色背景 42 设置绿色背景 43 设置黄色背景 44 设置蓝色背景 45 设置紫色背景 46 设置青色背景 47 设置白色(灰色)背景 49 设置缺省黑色背景
前景颜色是背景颜色减去 10
5 .zsh 美化 在 GitHub 上有一个 oh-my-zsh の项目，相信我，用上这个 zsh 以后，你会离不开它的，安装脚本附上
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; sh -c &amp;#34;$(wget -O- https://raw.</description>
    </item>
    
    <item>
      <title> Frp 内网穿透</title>
      <link>https://jokeme.top/p/frp_penetrate/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/frp_penetrate/</guid>
      <description>Frp 内网穿透 自打搞一个软路由，我就玩的可带劲了，什么 Linux , Docker , Java 各种技术都被逼提升了很多。 闲话不多说，直接说重点了
1. 准备工作：  frp-server &amp;amp; frp-client 可以在 GitHub 里下载 域名(需要备案) 有公网 IP の服务器一台  2. 配置 server 端 我是用的是 amd64 架构的，如果和我一样的话可以按我的命令来
wget https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_amd64.tar.gz tar -zxvf frp_0.33.0_linux_amd64.tar.gz mv frp_0.33.0_linux_amd64.tar.gz frp #为了接下来方便一点 cd frp rm frpc* #删除不必要的配置,也可以不删 nano frps.ini [common] bind_port = 7000  #对外提供服务的端口 dashboard_port = 7500 #访问控制板的端口 token = 123456 #token,相对于一个简单的验证 vhost_http_port = 80 #http服务在服务器的代理端口 可以根据自己的喜好设定这些配置
3. 配置 client 端 wget https://github.</description>
    </item>
    
    <item>
      <title> Ubuntu 使用 netplan 配置 WIFI</title>
      <link>https://jokeme.top/p/netplan_wifi/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/netplan_wifi/</guid>
      <description>Ubuntu 使用 netplan 配置 WIFI 在折腾 Ubuntu 的时候，我突然发现 Ubuntu 有好几套网络管理方案，但是在安装了图形化界面以后，只有Network Manager &amp;amp; Systemd-networkd 之一生效，
那像我这种爱折腾的人，肯定是不满足被束缚啊，为什么不能用命令行来连接 ? WiFi 呢？
1 .查看网卡名字 $ ~ iw dev phy#0 Interface wlx200db035fad3 ifindex 3 wdev 0x1 addr 20:0d:b0:35:fa:d3 ssid Tenda_277D40 type managed txpower 12.00 dBm 2 .打开无线网卡 $ ~ sudo ip lin set wlx200db035fad3 up 3 . 搜索 WiFi 信号 $ ~ sudo iw dev wlx200db035fad3 scan BSS **:**:**:**:**:**(on wlx200db035fad3) -- associated TSF: 1588670071330336 usec (18387d, 09:14:31) freq: 2437 beacon interval: 100 TUs capability: ESS Privacy ShortSlotTime (0x0411) signal: -80.</description>
    </item>
    
    <item>
      <title>Ubuntu 安装 **FFMPEG** 下载 m3u8 格式的视频</title>
      <link>https://jokeme.top/p/ffmpeg_download_m3u8/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/ffmpeg_download_m3u8/</guid>
      <description>Ubuntu 安装 FFMPEG 下载 m3u8 格式的视频 最近想下载一个某音视频，但是我能看不能下载，这不是扯吗？于是不能忍的我就打算盘盘这个视频
1 . 准备环境：Ubuntu 18.04 , FFMPEG 本着万物皆可 Linux の初心，我就不想用 Windows 了。
首先安装 FFMPEG
sudo apt -y install ffmpeg 2 . 抓包短视频的 m3u8 地址 iOS 端，我是使用的 Thor 这个 app,比较好用，应用商店搜索就有
然后得到真实的地址：
http://XXX.com/xxx/xxx.m3u8 3 . 使用 FFMPEG 进行下载 ffmpeg -i http://XXX.com/xxx/xxx.m3u8 -c copy xxx.mp4 然后就需要慢慢等待下载完成就可以了，真的是特别特别的简单</description>
    </item>
    
    <item>
      <title>安装 Linux 系统(Ubuntu)经验总结</title>
      <link>https://jokeme.top/p/ubuntu_install_faq/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/ubuntu_install_faq/</guid>
      <description>安装 Linux 系统(Ubuntu)经验总结 进来将近两三个星期的装系统经历，让我异常痛苦，先是 Bay Trail 主板的一些坑，然后是显卡驱动，然后又是一堆莫名其妙的问题&amp;hellip;&amp;hellip;
1. Bay Trail 主板的先天问题 在 这系列主板上安装 Windows 可能没有什么感觉，但是安装 Linux 异常的难，会造成啥啥啥内核错误，导致卡慢
需要在引导的后面 加上一句
intel_idle.max_cstate=1 2. 显卡驱动问题 在安装 Linux 时，常常会遇到没有对应显卡驱动的问题，这时候就要在引导的时候加上
nomodeset 3. 开机卡紫屏问题 这个问题原因可能各不一样，网上一大推，不赘述
4.开机卡只有鼠标和壁纸 说实话这个问题最好解决了，鼠标键盘都可以正常使用，ctrl + alt + t 打开 terminal,把 gnome 删掉即可，如果喜欢用图形界面还可以在重启以后在安装回来</description>
    </item>
    
    <item>
      <title>Bay Trail主板安装Linux的坑</title>
      <link>https://jokeme.top/p/install_linux_on_bay_trail/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/install_linux_on_bay_trail/</guid>
      <description>Bay Trail 主板安装 Linux 的坑 最近搞了一个 N2920 的低功耗小主机，本来打算搞软路由，但是家里网速不行，就打算先刷个 Linux 玩玩，于是我就被这个问题烦了将近半个月！
一开始我打算安装一个 CentOS 7 玩玩，当我下载完系统刻录完开始安装的时候发现 CentOS 7 的 installer 异常的卡顿，而且耗时也非常的多，差不多需要将近半个小时才可以到图形界面的安装(我这个小主机是有固态的，这个速度肯定有很大的问题),而且好不容易到了图形界面的安装环节，还经常卡死！刚开始 我还以为可能是这个 ISO 镜像有问题，又换了一个 CentOS 8 的镜像。
刻录&amp;ndash;安装&amp;ndash;等待&amp;ndash;卡死
Again
开机&amp;ndash;安装&amp;ndash;等待&amp;ndash;卡死
? ? ?我真的是&amp;hellip;&amp;hellip;一点办法都没有
这结果属实有点意外呀，怎么 CentOS 8 也是这个鸟样？
我不甘，又换了一个 Ubuntu 18
刻录&amp;ndash;安装&amp;ndash;等待&amp;ndash;卡死
卧槽，这是什么问题换系统 都不行，应该就不是软件的问题了吧，我就从主板开始动刀，会不会是因为主板的 BIOS 太老了，本来打算去更新一下 BIOS 结果，这是一个不知名的小板，不知道从哪里搞到 BIOS 文件，就放弃了！
然后去百度 为什么电脑安装 Linux 卡顿
众所周知，百度相当垃圾，大部分都是答非所问，要不然就是 CSDN,简书 的水贴，都没有用 :(
然后我又找隔壁 二狗子 意念扶梯子，用 Google 搜一下
然后我就在国外某个被大陆 404 的的技术论坛上找到了一点线索 ? ? ?
贴子网址： askubuntu
反正他们大概说的是 Bay Trail 主板上安装 Linux 出现的各种异常，刚刚好我的主板也是，出现的问题也和他们的很相似</description>
    </item>
    
    <item>
      <title>vim的常用操作快捷键</title>
      <link>https://jokeme.top/p/vim_hot_key/</link>
      <pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/vim_hot_key/</guid>
      <description>(1) 按两下 gg，定位光标到第一行。
(2) 按住 Shift+v，进入可视化编辑的列编辑模式。
(3) Shift+g，选中整个代码。
(4) 按下等号 =，格式化所有代码。
(5) 新年快乐🎉</description>
    </item>
    
  </channel>
</rss>
