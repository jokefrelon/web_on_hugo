<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on JokemeBlog</title>
    <link>https://jokeme.top/tags/shell/</link>
    <description>Recent content in Shell on JokemeBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jokeme.top/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>定时备份hugo帖子</title>
      <link>https://jokeme.top/p/backup_hugo_posts/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/backup_hugo_posts/</guid>
      <description>定时备份hugo帖子 今天出差,在高铁上实在是太无聊,信号也不怎么好,我就写了个每天晚上备份Hugo文章的脚本
#!/bin/bash datee=`date +%Y-%m-%d` bn=`docker ps | egrep hugo` if [[ -n $bn ]] then mkdir ~/udisk/bkhugo/$datee docker cp hugo:/root/pblog/content ~/udisk/bkhugo/$datee/ #记得换成你自己的路径 echo -e &amp;#34;\033[49;32mBackup posts successfully\033[0m&amp;#34; else echo -e &amp;#34;\033[49;31mService hugo is not running\033[0m&amp;#34; fi 也没有啥好说的,都是一些简单的命令组合而成,然后再利用crontab每天00:00执行</description>
    </item>
    
    <item>
      <title>一个有意思的shell变量问题</title>
      <link>https://jokeme.top/p/funny_space_in_shell_script/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/funny_space_in_shell_script/</guid>
      <description>一个有意思的shell变量问题 今天在上班时遇到了一个批量解压zip的需求，由于几十个压缩包的名称一样，chrome下载下来以后就自动给加了编号。并且解压后的文件名也是一样的，只不过里面的文件不一样。
虽然在Windows下有批量解压缩工具，但是我没有安装。我电脑上只有7zip。既然是批量处理文件，那我就想到了用shell来做这件事。
首先！我遇到的问题就是！文件名里面有空格，类似**&amp;ldquo;abc xyz.zip&amp;rdquo;**一个文件名被shell捕获成变量以后，在for循环里面会被错误的解析成两个不同的变量，这就导致了代码逻辑上没有问题。你不亲自调试一下，就不知道为什么会报错。
为此我百度了良久，找到了以下两种解决方案
1. 解决方案一：修改IFS 我百思不得其解，为什么这么多一毛一样的文章都推荐使用IFS，而且只修改了IFS，而且用完还没有给修改回来。这不是给自己挖坑吗
IFS的默认值为空白字符（换行符、制表符或者空格）。如果你手动的修改它为别的字符，那后续的代码也就会以该字符为定界符。只能说是简单粗暴，贼鸡儿好用！
2. 解决方案二：修改文件名 一开始我看到这种方案还很疑惑！我尼玛要是有那修改文件名的功夫我还写代码干啥，哈哈哈哈。然后我看了一下思路，嗯！还是有点道理的。原文见脚本之家。
大概思路我就放在下面的代码里面讲解吧！
allzip=`ls | grep zip | sed &amp;#39;s/ (/(/g&amp;#39;`	#先用sed把&amp;#39; (&amp;#39;替换成&amp;#39;(&amp;#39;保存到list里面 echo $allzip	#echo一下,让自己放心一店 for zip in $allzip do filen=`echo $zip | sed &amp;#39;s/(/ (/g&amp;#39;`	#把存起来的没有空格的变量还原成真正的有空格的文件名 mv &amp;#34;$filen&amp;#34; $zip	#拿到了真正的文件名,为了后续方便,直接把有空格的文件修改为没有空格的 unzip $zip	#顺带给它解压一下 done 好了就是这么的简单，也不用修改什么IFS。虽然有一丢丢的绕，但是也是非常容易理解的。你们也看出来了我个人是偏向于第二种方案的，因为修改IFS万一你忘记给改回去，那你下面还有字符串类分割的操作就会度过一段非常蛋疼的调试时光。</description>
    </item>
    
    <item>
      <title>Nginx目录美化</title>
      <link>https://jokeme.top/p/nginx_beautify/</link>
      <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/nginx_beautify/</guid>
      <description>Nginx目录美化 我们大家都知道啊! nginx是一个高性能的Web服务器,用于分享文件也是一个非常不错的选择,但是由于Nginx默认的目录太丑了, 都不好意思拿出手。这就有了本篇文章。
先来说一下我的环境: Ubuntu 20.04.1 ，Nginx 1.18
1. 添加Index.html至主机根目录 nano index.html 内容如下
&amp;lt;!-- autoindex.html 21.02, see https://phus.lu --&amp;gt; &amp;lt;script&amp;gt; !function(){ var website_title = &#39;&#39; var datetime_format = &#39;%Y-%b-%d %H:%M&#39; var show_readme_md = true var enable_footer_js = true var max_name_length = 20 var dom = { element: null, get: function (o) { var obj = Object.create(this) obj.element = (typeof o == &amp;quot;object&amp;quot;) ? o : document.createElement(o) return obj }, add: function (o) { var obj = dom.</description>
    </item>
    
    <item>
      <title>记录最近捯饬Linux的收获</title>
      <link>https://jokeme.top/p/linux_reward/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/linux_reward/</guid>
      <description>记录最近捯饬Linux的收获 虽然最近在准备专升本考试吧，但是也没有认真的复习，最近还是天天玩Linux，在这里记录一下。
1. Windows Terminal设置 如果你关注IT圈的话，你一定知道微软在Github开源了新的Terminal，并且这是一个颜值高,用着爽的全新版本,支持Unicode。这些都是后话，我要说的是WSL和Terminal相关的设置。因为Terminal打开WSL默认的路径是该用户的在Windows下的家目录，而此时你就需要修改setting.json对应位置添加以下配置：&amp;quot;startingDirectory&amp;quot;: &amp;quot;//wsl$/Ubuntu-18.04/home/frelon&amp;quot;
如果你还没有用过Windows Terminal那你可以先看看这个Windows Terminal的简介
2. aria2下载 众所周知，aria2是一款非常好用的一款下载工具，并且它开源，体积小，运行效率高等。什么？你没有听说过？那你总听说过Motrix吧！什么你还没有听说过？那你一定知道PanDown吧？没错这款伟大的软件就是基于aria2。
aria2本身只是命令行工具，所以我们可以在命令行里安装它。
sudo apt install aira2 如果你只是简简单单的下载文件，那curl 和 wget aira2是没有啥大的区别的。额说到这里哈，就不得不说今天是curl的23岁生日，curl是 March 20. 1998 年发布的。没错！确实是23年前的今天！因为时差的原因，那边还是20号，咱们这边已经21号了，不是我记错了。
然后我就根据我个人的使用习惯给alias一下了，因为我不喜欢这种字母和数组夹杂的命令，遇到了都会给重命名一下方便以后自己敲命令。
alias ac=&amp;quot;aria2c&amp;quot; 首先既然是下载工具，那我为什么要用aria2？
我们先来看看aria2支持啥协议
URI, MAGNET, TORRENT_FILE, METALINK_FILE
传统的http，https，ftp，磁力。bt种子，metalink。你就说它强大不强大吧，可以在这么小体量的情况下，做这么多事情。现在你知道为什么这么多人夸赞它了吧。
现在我们来说说看Windows这边的下载巨头：迅雷。
为什么我们都瞧不起迅雷？
因为迅雷是白眼狼，喝BT的血起家，把自己养肥了。到最后迅雷却不反哺BT下载的生态圈。就这一点就足够可耻的了。
3. 获取CPU温度 echo `echo &amp;quot;scale=2; $(cat /sys/class/thermal/thermal_zone2/temp)/1000&amp;quot; | bc` °C 用Ubuntu 20的小伙伴可以直接用这条命令查看cpu温度，Ubuntu18我还没有试过，别的系统我就不得而知了。
4. awk 、sed awk 是一个文本处理命令，常用的就是查找文本内部的字符。
默认情况下awk是用空格来分割，
awk &#39;{print $1}&#39; 如果你想用特定的字符串分割,可以用 -F来指定。
awk -F/ &#39;{print $1}&#39;  sed它同样也是文本处理，用来替换文本的，最常用到的可能就是在刚安装完系统后换软件源的时候。用国内的url来替换国外的url
sed -i &#39;s/xxx/yyy/g&#39; filename 这个就是把文件内部的xxx替换为yyy。如果需要在文件行首添加字符，就可以sed -i &#39;s/^/yyy/g&#39; filename，有行首肯定是有行尾，那行尾把 ^换成$就可以了。</description>
    </item>
    
    <item>
      <title>Linux 常用的小技巧</title>
      <link>https://jokeme.top/p/linux_skill/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/linux_skill/</guid>
      <description>Linux 常用的小技巧 1 .apt-get remove vsftpd &amp;ndash;purge 删除所有配置，下次安装的时候会重新生成配置文件
2 .编辑器 nano 快捷键 ALT+Shift+3	显示行号 CTRL+SHIFT+_	快速跳到某行
3 .如果不经常使用 Linux の桌面，但是又不希望桌面吃内存，可以试试看 sudo init 3 4 .echo 颜色输出 echo -e &amp;ldquo;\033[背景颜色；文字颜色 m 字符串\033[0m&amp;rdquo;
可以选择的编码如下所示(这些颜色是 ANSI 标准颜色)： 40 设置黑色背景 41 设置红色背景 42 设置绿色背景 43 设置黄色背景 44 设置蓝色背景 45 设置紫色背景 46 设置青色背景 47 设置白色(灰色)背景 49 设置缺省黑色背景
前景颜色是背景颜色减去 10
5 .zsh 美化 在 GitHub 上有一个 oh-my-zsh の项目，相信我，用上这个 zsh 以后，你会离不开它的，安装脚本附上
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; sh -c &amp;#34;$(wget -O- https://raw.</description>
    </item>
    
    <item>
      <title>Docker 中运行 OpenWrt</title>
      <link>https://jokeme.top/p/run_openwrt_in_docker/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/run_openwrt_in_docker/</guid>
      <description>Docker 中运行 OpenWrt 前几天解决了小主机 Ubuntu 系统的引导问题以后。便开始折腾 OpenWrt 了，在 GitHub 上找到了 L 大 的 Lede 源码，需要自己编译。
关于如何编译我也不说了，L 大 在 Readme 里面说的清清楚楚的，没有难度，就是需要有耐心和良好的网络环境，编译过程会很慢(建议扶梯子，我没有用梯子，整整编译了两天才完成！? ? ?) 也可以用我编译好的 x86_64 的固件(集成有ssr,v2ray,adblock plus,samba,vsftpd等常用插件)
对于编译出来的文件我来介紹一下：
   openwrt-x86-64-rootfs-squashfs.img OpenWrt for Docker の img     openwrt-x86-64-combined-squashfs.vmdk 虚拟机文件，丢进 VMware 里面使用   openwrt-x86-64-combined-squashfs.img 我们编译的固件，刻录到 u 盘上来安装    我一开始也不知道这些镜像应该选哪一个刻录，然后爬各种论坛终于被我发现了这几个文件的用法了
好！环境已经没有问题，安装包也有了，那就先在 Docker 里面试试看这个 OpenWrt 怎么样吧
1 导入 OpenWrt 的镜像 cd ~/lede/bin/targets/x86/64 mkdir -p ~/opt mount -o loop openwrt-x86-64-rootfs-squashfs.</description>
    </item>
    
    <item>
      <title>Bay Trail主板安装Linux的坑</title>
      <link>https://jokeme.top/p/install_linux_on_bay_trail/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/install_linux_on_bay_trail/</guid>
      <description>Bay Trail 主板安装 Linux 的坑 最近搞了一个 N2920 的低功耗小主机，本来打算搞软路由，但是家里网速不行，就打算先刷个 Linux 玩玩，于是我就被这个问题烦了将近半个月！
一开始我打算安装一个 CentOS 7 玩玩，当我下载完系统刻录完开始安装的时候发现 CentOS 7 的 installer 异常的卡顿，而且耗时也非常的多，差不多需要将近半个小时才可以到图形界面的安装(我这个小主机是有固态的，这个速度肯定有很大的问题),而且好不容易到了图形界面的安装环节，还经常卡死！刚开始 我还以为可能是这个 ISO 镜像有问题，又换了一个 CentOS 8 的镜像。
刻录&amp;ndash;安装&amp;ndash;等待&amp;ndash;卡死
Again
开机&amp;ndash;安装&amp;ndash;等待&amp;ndash;卡死
? ? ?我真的是&amp;hellip;&amp;hellip;一点办法都没有
这结果属实有点意外呀，怎么 CentOS 8 也是这个鸟样？
我不甘，又换了一个 Ubuntu 18
刻录&amp;ndash;安装&amp;ndash;等待&amp;ndash;卡死
卧槽，这是什么问题换系统 都不行，应该就不是软件的问题了吧，我就从主板开始动刀，会不会是因为主板的 BIOS 太老了，本来打算去更新一下 BIOS 结果，这是一个不知名的小板，不知道从哪里搞到 BIOS 文件，就放弃了！
然后去百度 为什么电脑安装 Linux 卡顿
众所周知，百度相当垃圾，大部分都是答非所问，要不然就是 CSDN,简书 的水贴，都没有用 :(
然后我又找隔壁 二狗子 意念扶梯子，用 Google 搜一下
然后我就在国外某个被大陆 404 的的技术论坛上找到了一点线索 ? ? ?
贴子网址： askubuntu
反正他们大概说的是 Bay Trail 主板上安装 Linux 出现的各种异常，刚刚好我的主板也是，出现的问题也和他们的很相似</description>
    </item>
    
    <item>
      <title>学习nginx代理相关的笔记</title>
      <link>https://jokeme.top/p/nginx_proxy/</link>
      <pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/nginx_proxy/</guid>
      <description>nginx 反向代理 nginx 一直都是我们比较常用的工具，它不仅功能强悍，而且性能也非常好 ?,一直深受开发者的喜爱
并且我们经常用 nginx 反代来做负载均衡，那么 nginx の反代原理我也就不说了，咱就说咋操作吧
我把我的网站的 nginx 配置给拷贝了下来
server { listen 443 ssl; server_name www.jokeme.top; add_header Strict-Transport-Security &amp;#34;max-age=31536000; includeSubDomains;preload&amp;#34; always; ssl_certificate /ssl/3355633_www.jokeme.top.pem; ssl_certificate_key /ssl/3355633_www.jokeme.top.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; location / { root /usr/share/nginx/html; index index.html index.htm; proxy_pass http://www.jokeme.top:8080; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } server{ listen 80; server_name localhost; rewrite ^(.</description>
    </item>
    
  </channel>
</rss>
