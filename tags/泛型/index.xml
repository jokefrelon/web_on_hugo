<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>泛型 on JokemeBlog</title>
    <link>https://jokeme.top/tags/%E6%B3%9B%E5%9E%8B/</link>
    <description>Recent content in 泛型 on JokemeBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://jokeme.top/tags/%E6%B3%9B%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>简单的Java泛型学习</title>
      <link>https://jokeme.top/p/java_generics/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jokeme.top/p/java_generics/</guid>
      <description>泛型 1 泛型特性 百度得如下解释：
泛型是程序设计语言的一种特性,允许程序员在强类型程序设计语言中编写代码时定义一些可变部分，那些部分在使用前必须作出指明。各种程序设计语言和其编译器、运行环境对泛型的支持均不一样。将类型参数化以达到代码复用提高软件开发工作效率的一种数据类型。泛型类是引用类型，是堆对象，主要是引入了类型参数这个概念。 2. 举个栗子 ? ? List Li = new ArrayList(); Li.add(&amp;#34;sdn&amp;#34;); Li.add(90); for (Object se :Li){ System.out.println(se); } java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String 典型的类型转换异常，Integer不能被转换成String
正确的写法如下：
List&amp;lt;String&amp;gt; Li = new ArrayList&amp;lt;String&amp;gt;(); 3. 泛型的使用 泛型有三种使用方式，分别为：泛型类、泛型接口、泛型方法
3.1 泛型类 泛型类型用于类的定义中，被称为泛型类。通过泛型可以完成对一组类的操作对外开放相同的接口。最典型的就是各种容器类，如：List、Set、Map。
一个最普通的泛型类：
public class examples&amp;lt;Human&amp;gt;{ private Human key; public examples(Human key) { this.key = key; } public Human getKey(){ return key; } } 注意事项
泛型的类型参数只能是类类型，不能是简单类型。
不能对确切的泛型类型使用instanceOf操作，编译时会出错。
3.2 泛型接口 泛型接口与泛型类的定义及使用基本相同</description>
    </item>
    
  </channel>
</rss>
